{"version":3,"sources":["Demoavatar.js","App.js","serviceWorker.js","index.js"],"names":["Demoavatar","props","react_default","a","createElement","className","src","concat","name","alt","job","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text1","text2","Myfun","bind","assertThisInitialized","btnfun","event","setState","defineProperty","target","value","id","src_Demoavatar","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAaeA,SATI,SAACC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,+BAAAC,OAAiCN,EAAMO,MAAQC,IAAI,WAC3DP,EAAAC,EAAAC,cAAA,cAAMH,EAAMO,KAAZ,KACAN,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,aAAKH,EAAMS,IAAX,UC4CEC,cA/Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACPC,MAAQ,GACRC,MAAQ,GACRb,KAAO,cACPE,IAAM,mBAEZE,EAAKU,MAAQV,EAAKU,MAAMC,KAAXV,OAAAW,EAAA,EAAAX,CAAAD,IACbA,EAAKa,OAASb,EAAKa,OAAOF,KAAZV,OAAAW,EAAA,EAAAX,CAAAD,IATJA,qEAYRc,GACJX,KAAKY,SAALd,OAAAe,EAAA,EAAAf,CAAA,GACGa,EAAMG,OAAOrB,KAAQkB,EAAMG,OAAOC,uCAIhCJ,GACHX,KAAKY,SAAS,CACZnB,KAAOO,KAAKI,MAAMC,MAClBV,IAAMK,KAAKI,MAAME,yCAKvB,OACEnB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAI2B,GAAG,UAAP,8BACA7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAYxB,KAAK,cAAcE,IAAI,cACnCR,EAAAC,EAAAC,cAAC4B,EAAD,CAAYxB,KAAK,eAAeE,IAAI,UACpCR,EAAAC,EAAAC,cAAC4B,EAAD,CAAYxB,KAAK,aAAaE,IAAI,WAClCR,EAAAC,EAAAC,cAAC4B,EAAD,CAAYxB,KAAMO,KAAKI,MAAMX,KAAME,IAAKK,KAAKI,MAAMT,MACjDR,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,SACR7B,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,OAAOF,GAAG,OAAOvB,KAAK,QAAQ0B,SAAUnB,KAAKO,MAAOQ,MAAOf,KAAKI,MAAMC,QAClFlB,EAAAC,EAAAC,cAAA,SAAO2B,GAAG,QAAV,gBACA7B,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,OAAOF,GAAG,OAAOvB,KAAK,QAAQ0B,SAAUnB,KAAKO,MAAOQ,MAAOf,KAAKI,MAAME,QAClFnB,EAAAC,EAAAC,cAAA,UAAQ+B,QAASpB,KAAKU,QAAtB,qBA3CcW,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b08550d7.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Demo.css';\r\n\r\nconst Demoavatar = (props) => {\r\n  return(\r\n    <div className=\"avatarstyle\">\r\n      <img src={`https://joeschmoe.io/api/v1/${props.name}`} alt=\"avatar\"/>\r\n      <h2> {props.name} </h2>\r\n      <p><h3><u> {props.job} </u></h3></p>\r\n    </div>\r\n  );\r\n}\r\nexport default Demoavatar;\r\n","import React,{Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Demoavatar from './Demoavatar';\r\n\r\nclass App extends Component{\r\n\r\n  constructor() {\r\n      super();\r\n      this.state = {\r\n            text1 : \"\" ,\r\n            text2 : \"\" ,\r\n            name : \"your avatar\",\r\n            job : \"your profession\"\r\n      }\r\n      this.Myfun = this.Myfun.bind(this);\r\n      this.btnfun = this.btnfun.bind(this);\r\n  }\r\n\r\n  Myfun(event){\r\n    this.setState({\r\n      [event.target.name] : event.target.value\r\n    })\r\n  }\r\n\r\n  btnfun(event){\r\n      this.setState({\r\n        name : this.state.text1,\r\n        job : this.state.text2\r\n      })\r\n  }\r\n\r\nrender(){\r\n  return(\r\n    <div>\r\n    <h1 id='header'>  WELCOME TO AVATAR WORLD </h1>\r\n    <Demoavatar name='Virat Kohli' job='cricketer'/>\r\n    <Demoavatar name='Varun Dhavan' job='actor'/>\r\n    <Demoavatar name='Atif Aslam' job='singer'/>\r\n    <Demoavatar name={this.state.name} job={this.state.job}/>\r\n      <hr/>\r\n    <div id=\"mydiv\">\r\n    <h3> want you avatar??</h3>\r\n    <br/>\r\n    <lable > Name? </lable>\r\n    <input type=\"text\" id=\"mrgr\" name=\"text1\" onChange={this.Myfun} value={this.state.text1}/>\r\n    <lable id=\"mrgl\"> profession?</lable>\r\n    <input type=\"text\" id=\"mrgr\" name=\"text2\" onChange={this.Myfun} value={this.state.text2}/>\r\n    <button onClick={this.btnfun}> Create </button>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}